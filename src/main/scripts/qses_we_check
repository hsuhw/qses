#!/usr/bin/env python3
"""
A python script to solve word equation only by transformation (ignore length constraints):
Usage:
    qses_we_check filename
"""
import sys
import os
_parent_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(_parent_dir)
sys.path.append(f'{_parent_dir}/python')
from argparse import ArgumentParser
from typing import Optional
from prob import Problem
from solver import BasicSolver, Strategy
from parsing.basic import parse_file, parse_string


def parse_problem(in_str: str, option: str ='file') -> Optional[Problem]:
    if option == 'file':
        problem = parse_file(in_str)
    elif option == 'string':
        problem = parse_string(in_str)
    else:
        print('Wrong input option. Specify \'file\' or \'string\'')
        return None
    # print('problem read:')
    # print_problem(problem)
    return problem


def print_problem(problem):
    for wc in problem.word_equations:
        print(wc)
    for lc in problem.len_constraints:
        print(lc)
    if problem.has_reg_constraints():
        regc = problem.reg_constraints
        for rc in regc:
            print(f'\n----- {rc} -----')
            for e in regc[rc]:
                print(e)


def main(argv):
    # Set argument parser
    arg_parser = ArgumentParser(prog=None,
                                usage=None,
                                description="A python script to solve word equation only by transformation "
                                            "(ignore length constraints):",
                                epilog=None)
    arg_parser.add_argument("filename", help="filename to check")
    arg_parser.add_argument("-s", "--strategy", help="Transform strategy, default is first",
                            dest="strategy", default="")
    arg_parser.add_argument("-q", "--quadratic", help="Quadratic problem, default is \'off\'",
                            dest="quadratic", default="off")
    args = arg_parser.parse_args()
    # print(args.filename)
    # print(args.strategy)
    problem = parse_problem(args.filename)
    assert problem
    solver = BasicSolver(problem)
    if args.quadratic != 'off':
        solver.on_the_fly_quadratic = True
    if args.strategy == 'full':
        solver.strategy = Strategy.full
    elif args.strategy == 'first':
        solver.strategy = Strategy.first
    elif args.strategy == 'shortest':
        solver.strategy = Strategy.shortest
    elif args.strategy == 'shortest_side':
        solver.strategy = Strategy.shortest_side
    elif args.strategy == 'one_elem_first':
        solver.strategy = Strategy.one_elem_first
    elif args.strategy == 'var_char_first':
        solver.strategy = Strategy.var_char_first
    elif args.strategy == 'var_var_first':
        solver.strategy = Strategy.var_var_first
    elif args.strategy == 'empty_vars_first':
        solver.strategy = Strategy.empty_vars_first
    elif args.strategy == 'customized':
        solver.strategy = Strategy.customized
    solver.solve()
    if args.strategy != '':
        # msg = f'# of nodes: {solver.resolve.num_nodes()}, # of transitions: {solver.resolve.num_transitions()}, '
        msg = f'{args.strategy},{solver.resolve.num_nodes()},{solver.resolve.num_transitions()},'
    else:
        msg = ''
    if solver.resolve.has_solution():
        print(msg + 'sat')
    else:
        print(msg + 'unsat')


if __name__ == '__main__':
    main(sys.argv)
