#!/usr/bin/env python3
"""
A python script to solve word equation only by transformation (ignore length constraints):
Usage:
    qses_we_check filename
"""
import sys
import os
_parent_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(_parent_dir)
sys.path.append(f'{_parent_dir}/python')
from argparse import ArgumentParser
from typing import Optional
from prob import Problem
from solver import BasicSolver, Strategy, QuadraticStrategy, print_tree_dot_pretty, print_tree_dot_pretty_sub
from parsing.basic import parse_file, parse_string


def parse_problem(in_str: str, option: str ='file') -> Optional[Problem]:
    if option == 'file':
        problem = parse_file(in_str)
    elif option == 'string':
        problem = parse_string(in_str)
    else:
        print('Wrong input option. Specify \'file\' or \'string\'')
        return None
    # print('problem read:')
    # print_problem(problem)
    return problem


def print_problem(problem):
    for wc in problem.word_equations:
        print(wc)
    for lc in problem.len_constraints:
        print(lc)
    if problem.has_reg_constraints():
        regc = problem.reg_constraints
        for rc in regc:
            print(f'\n----- {rc} -----')
            for e in regc[rc]:
                print(e)


def main(argv):
    # Set argument parser
    arg_parser = ArgumentParser(prog=None,
                                usage=None,
                                description="A python script to solve word equation only by transformation "
                                            "(ignore length constraints):",
                                epilog=None)
    arg_parser.add_argument("filename", help="filename to check")
    arg_parser.add_argument("-s", "--strategy", help="Transform strategy, default is \'shortest_side\'. "
                                                     "Strategies available: "
                                                     "full, shortest, shortest_side, one_elem_first, var_char_first, "
                                                     "var_var_first, empty_vars_first",
                            dest="strategy", default="shortest_side")
    arg_parser.add_argument("-q", "--quadratic", help="Apply on-the-fly quadratic for non-quadratic problems with "
                                                      "specified strategy, default is \'shortest_side\' "
                                                      "(Available strategies: "
                                                      "same_first, same_short, same_short_side, "
                                                      "first, shortest, shortest_side).",
                            dest="quadratic", default="shortest_side")
    arg_parser.add_argument("-d", "--debug", help="Set debug flag to print out transform details, default is \'off\' "
                                                  "(set \'on\' to activate)",
                            dest="debug", default="off")
    arg_parser.add_argument("-g", "--graphviz", help="Output Graphviz, default is \'off\'. (set \'on\' to activate, "
                                                     "set \'sub\' to print a sub-graph",
                            dest="graphviz", default="off")
    args = arg_parser.parse_args()
    # print(args.filename)
    # print(args.strategy)
    problem = parse_problem(args.filename)
    assert problem
    solver = BasicSolver(problem)
    if args.quadratic != 'off':
        solver.on_the_fly_quadratic = True
        try:
            solver.quadratic_strategy = QuadraticStrategy[args.quadratic]
        except KeyError:
            print(f'quadratic strategy \'{args.quadratic}\' not available. Run with -h to see available strategies.')
            exit(1)
    if args.debug == 'on':
        solver.debug = True
    if args.strategy == '':
        pass  # default strategy (check solver.py)
    else:
        try:
            solver.strategy = Strategy[args.strategy]
        except KeyError:
            print(f'Specified strategy \'{args.strategy}\' not available. Run with -h to see available strategies.')
            exit(1)
    solver.solve()
    # msg = f'# of nodes: {solver.resolve.num_nodes()}, # of transitions: {solver.resolve.num_transitions()}, '
    msg = f'{solver.strategy},{solver.quadratic_strategy},{solver.resolve.num_nodes()},' \
          f'{solver.resolve.num_transitions()},'
    if solver.resolve.has_solution():
        print(msg + 'sat')
    else:
        print(msg + 'unsat')

    if args.graphviz == 'on':
        fn = print_tree_dot_pretty(solver.resolve)
        print(f'Graphviz output name: \"{fn}.gv.pdf\"\n')
    if args.graphviz == 'sub':
        fn = print_tree_dot_pretty_sub(solver.resolve)
        print(f'Graphviz output name: \"{fn}.gv.pdf\"\n')


if __name__ == '__main__':
    main(sys.argv)
