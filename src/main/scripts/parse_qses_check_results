#!/usr/bin/env python3
"""
This script parses the resuts reported by `check_minibenchmark`, then copies selected smt problems to another directory
for further examination.

1. For double check results, it copies smt files listed in qses wrong to a new directory named with postfix
   '_double_check' to the benchmark directory name.
2. For strategy comparison results, it copies all smt files having nodes and transitions during solving to a new
   directory named with postfix '_strategy_comp' to the benchmark directory name.
"""
import os
from argparse import ArgumentParser
from pypeg2 import *


Number = re.compile(r"\d+")
RestLines = re.compile(r"^(.+)(?:\n|\r\n?)((?:(?:\n|\r\n?).+)+)", re.MULTILINE)


class CheckResult(Keyword):
    grammar = Enum(K('sat'), K('unsat'), K('unknown'), K('timeout'))


class DoubleCheckHead(str):
    grammar = re.compile(r"qses wrong|qses timeout|inconsist results")


class DoubleCheckHeadline(object):
    # grammar = '-----', attr('title', DoubleCheckHead), ':', attr('num', int), \
    #           'cases. format: (filename, qses, cvc4, z3) -----'
    grammar = '-----', attr('title', DoubleCheckHead), ':', attr('num', int), omit(restline)


class SmtFilename(str):
    grammar = re.compile(r".*\.smt2")


class DoubleCheckResult(List):
    grammar = SmtFilename, ',', csl(CheckResult)


class DoubleCheckResultBlock(List):
    grammar = attr('headline', DoubleCheckHeadline), maybe_some(DoubleCheckResult)


class DoubleCheckReport(List):
    grammar = 'path of problem set: ', name(), omit(restline), omit(restline), DoubleCheckResultBlock, \
              omit(RestLines)


class StrategyResult(Namespace):
    grammar = name(), ',', attr('nodes', int), ',', attr('transitions', int), ',', attr('result', str)


class StrategyComparisonResult(List):
    grammar = attr('filename', SmtFilename), omit(restline), some(StrategyResult)


class StrategyComparisonReport(List):
    grammar = 'path of problem set: ', name(), omit(restline), maybe_some(StrategyComparisonResult)


def main(argv):
    # Set argument parser
    arg_parser = ArgumentParser(prog=None,
                                usage=None,
                                description="A python script to parse qses checking resuls",
                                epilog=None)
    arg_parser.add_argument("filename", help="result filename")
    arg_parser.add_argument("-t", "--type",
                            help="Type of checking results, \'d\' for double check, \'s\' for strategy comparison",
                            dest="type", default="d")
    args = arg_parser.parse_args()

    print(f'reading result file {args.filename}')

    with open(args.filename, 'r') as fp:
        lines = fp.readlines()
    report = ''.join(lines)
    if args.type == 'd':
        print('type of results: double check')
        ast = parse(report, DoubleCheckReport)
        print(f'parsing double check results of {ast.name}')
        print(f'looking for files in {ast[0].headline.title}')
        print(f'number of files: {ast[0].headline.num}')
        tgt_dir = f'{ast.name}_double_check'
        filenames = [e[0] for e in ast[0]]
    elif args.type == 's':
        print('type of results: strategy comparison')
        ast = parse(report, StrategyComparisonReport)
        print(f'parsing strategy comparison results of {ast.name}')
        tgt_dir = f'{ast.name}_strategy_comparison'
        filenames = [e.filename for e in ast]
    else:
        assert False

    os.system(f'mkdir {tgt_dir}')
    for f in filenames:
        print(f'copying {f}')
        os.system(f'cp {ast.name}/{f} {tgt_dir}')


if __name__ == '__main__':
    main(sys.argv)