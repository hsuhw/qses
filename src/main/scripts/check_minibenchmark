#!/usr/bin/env python3
"""
A Python script to check problem set with qses, cvc4, and z3, then compare their results.
Usage:
    check_minibenchmakr path_to_problems

Note:
    Problem set shall be in a directory as specified
    Each problem' filename is supposed to have extension '.smt2'
    The qses script to be used must be in the same directory

Result output:
    The result will be written in a file named 'path_to_problem.result'
"""
import sys
import os
_base_dir = os.path.dirname(os.path.realpath(__file__))
from argparse import ArgumentParser
from typing import Tuple, List
from subprocess import STDOUT, check_output, CalledProcessError, TimeoutExpired

# global settings (ignore 'full', 'customized')
strategy_options_full = ['full', 'first', 'shortest', 'shortest_side', 'one_elem_first', 'var_char_first',
                         'var_var_first', 'empty_vars_first', 'customized']
strategy_options = ['shortest_side']
quadratic_strategy_options = ['same_first', 'same_short', 'same_short_side', 'first', 'shortest', 'shortest_side']
# quadratic_strategy_options = [e.name for e in QuadraticStrategy]


RET_FORMAT = List[str]
STRATEGY_COMP_FORMAT = List[str]
_column_width = 16


def run_qses(filename: str, strategy: str = '', quadratic: str = 'off') -> str:
    try:
        output = str(check_output([f'{_base_dir}/qses_we_check', f'-s={strategy}', f'-q={quadratic}', filename],
                                  stderr=STDOUT, timeout=10))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(output)
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def run_z3qses(filename: str) -> str:
    try:
        output = str(check_output(['./z3qses', 'smt.string_solver=z3str3', filename],
                                  stderr=STDOUT, timeout=10))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(output)
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def run_qses_strategy_comp(filename: str, quadratic: str = 'off') -> List[STRATEGY_COMP_FORMAT]:
    ret: List[STRATEGY_COMP_FORMAT] = list()
    if quadratic == 'on':
        q_strategy_options = quadratic_strategy_options
    else:
        q_strategy_options = [quadratic]
    for strategy in strategy_options:
        for q_strategy in q_strategy_options:
            try:
                output = check_output([f'{_base_dir}/qses_we_check', f'-s={strategy}', f'-q={q_strategy}', filename],
                                      stderr=STDOUT, timeout=10)
            except CalledProcessError as err:
                output = err.output
            except TimeoutExpired:
                output = 'timeout'

            if output == 'timeout':
                ret.append([strategy, q_strategy, '0', '0', output])
            else:
                ret.append(output.decode("utf-8").rstrip().split(','))
    return ret


def run_cvc4(filename: str) -> str:
    try:
        output = str(check_output(['cvc4', '--lang', 'smt', filename], stderr=STDOUT, timeout=10))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(f'cvc4 output:\n{output}')
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def run_z3str3(filename: str) -> str:  # specify string solver z3str3
    try:
        output = str(check_output(['z3', 'smt.string_solver=z3str3', filename], stderr=STDOUT, timeout=10))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(f'z3 output:\n{output}')
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def run_z3(filename: str) -> str:  # without specifying z3str3 string solver
    try:
        output = str(check_output(['z3', filename], stderr=STDOUT, timeout=10))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(f'z3 output:\n{output}')
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def print_tuple(e: RET_FORMAT) -> str:
    return ',  '.join(e)


def print_tuple_w_name(e: RET_FORMAT, tool_names: List[str]) -> str:
    assert len(e) == len(tool_names) + 1
    ret:RET_FORMAT = list()
    ret.append(e[0])
    for i in range(1,len(e)):
        ret.append(f'{tool_names[i-1]}:{e[i]}')
    return ',  '.join(ret)


def write_result_double_check(benchmark_path: str, prob_size: int, strategy: str, qses_wrong: List[RET_FORMAT],
                              qses_timeout: List[RET_FORMAT], inconsistent: List[RET_FORMAT], all_sat: List[RET_FORMAT],
                              all_unsat: List[RET_FORMAT], all_ans_note: List[RET_FORMAT], quadratic: str):
    # write result
    with open(f'{os.path.basename(benchmark_path)}.double_check', 'w') as fp:
        fp.write(f'path of problem set: {benchmark_path}\n')
        fp.write(f'number of processed problems:  {prob_size}\n')
        fp.write(f'on-the-fly quadratic strategy: {quadratic}\n')
        if strategy == '':
            fp.write(f'qses strategy set: default\n')
        else:
            fp.write(f'qses strategy set: {strategy}\n')
        fp.write(f'\n----- qses wrong: {len(qses_wrong)} cases. format: (filename, qses, cvc4, z3, z3str3) -----\n')
        for e in qses_wrong:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- qses timeout: {len(qses_timeout)} cases. format: (filename, qses, cvc4, z3, z3str3) -----\n')
        for e in qses_timeout:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- inconsist results: {len(inconsistent)} cases. '
                 f'format: (filename, qses, cvc4, z3, z3str3) -----\n')
        for e in inconsistent:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- all sat results: {len(all_sat)} cases. format: (filename, qses, cvc4, z3, z3str3) -----\n')
        for e in all_sat:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- all unsat results: {len(all_unsat)} cases. '
                 f'format: (filename, qses, cvc4, z3, z3str3) -----\n')
        for e in all_unsat:
            fp.write(f'{print_tuple(e)}\n')
    # write all results
    with open(f'{os.path.basename(benchmark_path)}.log', 'w') as fp:
        fp.write(f'path of problem set: {benchmark_path}\n')
        fp.write(f'number of processed problems:  {prob_size}\n')
        fp.write(f'on-the-fly quadratic strategy: {quadratic}\n')
        if strategy == '':
            fp.write(f'qses strategy set: default\n')
        else:
            fp.write(f'qses strategy set: {strategy}\n')
        fp.write(f'format: (filename, qses:result, cvc4:result, z3:result, z3str3:result)\n')
        tool_names = ['qses', 'cvc4', 'z3', 'z3str3']
        for e in all_ans_note:
            fp.write(f'{print_tuple_w_name(e,tool_names)}\n')


def write_result_double_check_z3qses(benchmark_path: str, prob_size: int, z3qses_wrong: List[RET_FORMAT],
                                     z3qses_timeout: List[RET_FORMAT], inconsistent: List[RET_FORMAT],
                                     all_sat: List[RET_FORMAT], all_unsat: List[RET_FORMAT],
                                     all_ans_note: List[RET_FORMAT]):
    # write result
    with open(f'{os.path.basename(benchmark_path)}.z3qses_double_check', 'w') as fp:
        fp.write(f'path of problem set: {benchmark_path}\n')
        fp.write(f'number of processed problems:  {prob_size}\n')
        fp.write(f'\n----- z3qses wrong: {len(z3qses_wrong)} cases. format: (filename, z3qses, cvc4, z3, z3str3)'
                 f' -----\n')
        for e in z3qses_wrong:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- z3qses timeout: {len(z3qses_timeout)} cases. format: (filename, z3qses, cvc4, z3, z3str3)'
                 f' -----\n')
        for e in z3qses_timeout:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- inconsist results: {len(inconsistent)} cases. format: (filename, z3qses, cvc4, z3, z3str3)'
                 f' -----\n')
        for e in inconsistent:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- sat results: {len(all_sat)} cases. format: (filename, z3qses, cvc4, z3, z3str3) -----\n')
        for e in all_sat:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- unsat results: {len(all_unsat)} cases. format: (filename, z3qses, cvc4, z3, z3str3) -----\n')
        for e in all_unsat:
            fp.write(f'{print_tuple(e)}\n')
    # write all results
    with open(f'{os.path.basename(benchmark_path)}.z3qses_log', 'w') as fp:
        fp.write(f'path of problem set: {benchmark_path}\n')
        fp.write(f'number of processed problems:  {prob_size}\n')
        fp.write(f'format: (filename, z3qses:result, cvc4:result, z3:result, z3str3:result) -----\n')
        tool_names = ['z3qses', 'cvc4', 'z3', 'z3str3']
        for e in all_ans_note:
            fp.write(f'{print_tuple_w_name(e,tool_names)}\n')


def write_result_strategy(benchmark_path: str, prob_size: int, result: List[Tuple[str, List[STRATEGY_COMP_FORMAT]]],
                          quadratic: str):
    with open(f'{os.path.basename(benchmark_path)}.strategy_comp', 'w') as fp:
        fp.write(f'path of problem set: {benchmark_path}\n')
        fp.write(f'number of processed problems:  {prob_size}\n')
        fp.write(f'on-the-fly quadratic strategy (\'on\' compares all): {quadratic}\n')
        for res in result:
            fp.write(f'\n{res[0]}: (strategy, q-strategy, # nodes, # transitions, sat/unsat?)\n')
            fp.write('    ' + '\n    '.join([', '.join([s.rjust(_column_width) for s in e]) for e in res[1]]) + '\n')


def double_check(benchmark_path: str, names: List[str], strategy: str, quadratic: str = 'off'):
    qses_wrong: List[RET_FORMAT] = list()
    qses_timeout: List[RET_FORMAT] = list()
    inconsistent: List[RET_FORMAT] = list()
    all_sat: List[RET_FORMAT] = list()
    all_unsat: List[RET_FORMAT] = list()
    all_ans_note: List[RET_FORMAT] = list()
    counter = 0
    for name in names:
        filename = f'{benchmark_path}/{name}'
        ret_qses = run_qses(filename, strategy, quadratic)
        ret_cvc4 = run_cvc4(filename)
        ret_z3 = run_z3(filename)
        ret_z3str3 = run_z3str3(filename)
        print(f'{name} checked by qses, cvc4, z3, z3str3: {ret_qses}, {ret_cvc4}, {ret_z3}, {ret_z3str3}')

        ret = (name, ret_qses, ret_cvc4, ret_z3, ret_z3str3)
        all_ans_note.append(ret)
        if ret_qses != ret_cvc4 or ret_qses != ret_z3 or ret_qses != ret_z3str3 or \
                ret_cvc4 != ret_z3 or ret_cvc4 != ret_z3str3 or ret_z3 != ret_z3str3:
            inconsistent.append(ret)
        if ret_qses == 'timeout':
            qses_timeout.append(ret)
        if (ret_qses == 'sat' and ret_cvc4 == 'unsat') or (ret_qses == 'unsat' and ret_cvc4 == 'sat') or \
                (ret_qses == 'sat' and ret_z3 == 'unsat') or (ret_qses == 'unsat' and ret_z3 == 'sat') or \
                (ret_qses == 'sat' and ret_z3str3 == 'unsat') or (ret_qses == 'unsat' and ret_z3str3 == 'sat'):
            qses_wrong.append(ret)
        if ret_qses == 'sat' and ret_cvc4 == 'sat' and (ret_z3 == 'sat' or ret_z3str3 == 'sat'):
            all_sat.append(ret)
        if ret_qses == 'unsat' and ret_cvc4 == 'unsat' and (ret_z3 == 'unsat' or ret_z3str3 == 'unsat'):
            all_unsat.append(ret)

        # write when 1000 problems processed to have some results if the script terminates accidentally
        counter += 1
        if counter % 1000 == 0:
            write_result_double_check(benchmark_path, counter, strategy, qses_wrong, qses_timeout, inconsistent,
                                      all_sat, all_unsat, all_ans_note, quadratic)

    # write the final results
    write_result_double_check(benchmark_path, counter, strategy, qses_wrong, qses_timeout, inconsistent, all_sat,
                              all_unsat, all_ans_note, quadratic)


def double_check_z3qses(benchmark_path: str, names: List[str]):
    z3qses_wrong: List[RET_FORMAT] = list()
    z3qses_timeout: List[RET_FORMAT] = list()
    inconsistent: List[RET_FORMAT] = list()
    all_sat: List[RET_FORMAT] = list()
    all_unsat: List[RET_FORMAT] = list()
    all_ans_note: List[RET_FORMAT] = list()
    counter = 0
    for name in names:
        filename = f'{benchmark_path}/{name}'
        ret_z3qses = run_z3qses(filename)
        ret_cvc4 = run_cvc4(filename)
        ret_z3 = run_z3(filename)
        ret_z3str3 = run_z3str3(filename)
        print(f'{name} checked by z3qses, cvc4, z3, z3str3: {ret_z3qses}, {ret_cvc4}, {ret_z3}, {ret_z3str3}')

        ret = (name, ret_z3qses, ret_cvc4, ret_z3, ret_z3str3)
        all_ans_note.append(ret)
        if ret_z3qses != ret_cvc4 or ret_z3qses != ret_z3 or ret_z3qses != ret_z3str3 or \
                ret_cvc4 != ret_z3 or ret_cvc4 != ret_z3str3 or ret_z3 != ret_z3str3:
            inconsistent.append(ret)
        if ret_z3qses == 'timeout':
            z3qses_timeout.append(ret)
        if (ret_z3qses == 'sat' and ret_cvc4 == 'unsat') or (ret_z3qses == 'unsat' and ret_cvc4 == 'sat') or \
                (ret_z3qses == 'sat' and ret_z3 == 'unsat') or (ret_z3qses == 'unsat' and ret_z3 == 'sat') or \
                (ret_z3qses == 'sat' and ret_z3str3 == 'unsat') or (ret_z3qses == 'unsat' and ret_z3str3 == 'sat'):
            z3qses_wrong.append(ret)
        if ret_z3qses == 'sat' and ret_cvc4 == 'sat' and (ret_z3 == 'sat' or ret_z3str3 == 'sat'):
            all_sat.append(ret)
        if ret_z3qses == 'unsat' and ret_cvc4 == 'unsat' and (ret_z3 == 'unsat' or ret_z3str3 == 'unsat'):
            all_unsat.append(ret)

        # write when 1000 problems processed to have some results if the script terminates accidentally
        counter += 1
        if counter % 1000 == 0:
            write_result_double_check_z3qses(benchmark_path, counter, z3qses_wrong, z3qses_timeout, inconsistent,
                                            all_sat, all_unsat, all_ans_note)

    # write the final results
    write_result_double_check_z3qses(benchmark_path, counter, z3qses_wrong, z3qses_timeout, inconsistent, all_sat,
                                     all_unsat, all_ans_note)


def is_zero_unsat(data: List[STRATEGY_COMP_FORMAT]):
    return sum([1 for e in data if e[2] != '0' or e[3] != '0' or e[4] != 'unsat']) == 0


def strategy_comparison(benchmark_path: str, names: List[str], quadratic: str = 'off'):
    print('comparing qses transform strategies: (' + ', '.join(strategy_options) + ')')
    results: List[Tuple[str, List[STRATEGY_COMP_FORMAT]]] = list()
    counter = 0
    for name in names:
        filename = f'{benchmark_path}/{name}'
        ret_qses = run_qses_strategy_comp(filename, quadratic)
        print(f'\n{name} checked by qses, comparing transform strategies:')
        print('    ' +
              ', '.join([e.rjust(_column_width) for e in
                         ['strategy', 'q-strategy', '# nodes', '# transitions', 'sat/unsat?']]))
        print('    ' + '\n    '.join([', '.join([s.rjust(_column_width) for s in e]) for e in ret_qses]))
        if not is_zero_unsat(ret_qses):  # filter out cases of zero node/transition and unsat
            results.append((name, ret_qses))

        # write when 1000 problems processed to have some results if the script terminates accidentally
        counter += 1
        if counter % 1000 == 0:
            write_result_strategy(benchmark_path, counter, results, quadratic)

    # write the final results
    write_result_strategy(benchmark_path, counter, results, quadratic)


def main(argv):
    # Set argument parser
    arg_parser = ArgumentParser(prog=None,
                                usage=None,
                                description="A python script to solve word equation only by transformation "
                                            "(ignore length constraints):",
                                epilog=None)
    arg_parser.add_argument("benchmark_path", help="path of benchmarks")
    arg_parser.add_argument("-c", "--compare",
                            help="Report comparison of qses transform strategies, default is off (double check). "
                                 "If set on, double check is disabled.",
                            dest="compare", default="off")
    arg_parser.add_argument("-s", "--strategy",
                            help="Specify strategy for double check, default is \'\'. ",
                            dest="strategy", default="")
    arg_parser.add_argument("-q", "--quadratic",
                            help="Apply on-th-fly quadratic, default is \'off\', "
                                 "set a specific strategy or just set \'on\' to compare all strategies. "
                                 "(Available strategies: same_first, same_short, same_short_side, "
                                 "first, shortest, shortest_side)",
                            dest="quadratic", default="off")
    arg_parser.add_argument("-z", "--z3qses",
                            help="Double check z3qses (qses in z3), default is \'off\', set \'on\' to use.",
                            dest="z3qses", default="off")
    args = arg_parser.parse_args()

    benchmark_path = os.path.normpath(args.benchmark_path)
    qses_strategy_flag = args.compare != 'off'
    names = sorted([f for f in os.listdir(benchmark_path) if '.smt2' in f])
    prob_size = len(names)
    print(f'benchmark path: {benchmark_path}')
    print(f'number of problems: {prob_size}')

    if args.z3qses=='on':  # run z3qses double check
        double_check_z3qses(benchmark_path, names)
        exit(0)

    assert args.strategy in strategy_options_full + ['']
    assert args.quadratic in quadratic_strategy_options + ['on', 'off']
    if qses_strategy_flag:
        print('task: qses strategy comparison')
        if args.quadratic == 'on':
            print('on-the-fly strategy: compare all')
        else:
            print(f'on-the-fly quadratic strategy: {args.quadratic}')
        strategy_comparison(benchmark_path, names, args.quadratic)
    else:
        if args.strategy == '':
            print(f'task: double check with default qses strategy')
        else:
            print(f'task: double check with qses strategy {args.strategy}')
        assert args.quadratic != 'on'
        print(f'on-the-fly quadratic strategy: {args.quadratic}')
        double_check(benchmark_path, names, args.strategy, args.quadratic)


if __name__ == '__main__':
    main(sys.argv)
