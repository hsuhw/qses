#!/usr/bin/env python3
"""
A Python script to check problem set with qses, cvc4, and z3, then compare their results.
Usage:
    check_minibenchmakr path_to_problems

Note:
    Problem set shall be in a directory as specified
    Each problem' filename is supposed to have extension '.smt2'
    The qses script to be used must be in the same directory

Result output:
    The result will be written in a file named 'path_to_problem.result'
"""
import sys
import os
_base_dir = os.path.dirname(os.path.realpath(__file__))
from subprocess import STDOUT, check_output, CalledProcessError, TimeoutExpired
from typing import Tuple, List
from argparse import ArgumentParser


strategy_options = ['full', 'first', 'var_char_first']
RET_FORMAT = Tuple[str, str, str, str]
# STRATEGY_COMP_FORMAT = Tuple[str, str, str, str]
STRATEGY_COMP_FORMAT = List[str]


def run_qses(filename: str, strategy: str = '') -> str:
    try:
        output = str(check_output([f'{_base_dir}/qses_we_check', f'-s={strategy}', filename], stderr=STDOUT,
                                  timeout=120))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(output)
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def run_qses_strategy_comp(filename: str) -> List[STRATEGY_COMP_FORMAT]:
    ret: List[STRATEGY_COMP_FORMAT] = list()
    for strategy in strategy_options:
        try:
            output = check_output([f'{_base_dir}/qses_we_check', f'-s={strategy}', filename], stderr=STDOUT,
                                  timeout=120)
        except CalledProcessError as err:
            output = err.output
        except TimeoutExpired:
            output = 'timeout'
        # ret.append(f'strategy: {strategy}\n' + output.decode("utf-8"))
        if output == 'timeout':
            ret.append([strategy, '0', '0', output])
        else:
            ret.append(output.decode("utf-8").rstrip().split(','))
            # ret.append(tuple(output.decode("utf-8").rstrip().split(',')))
    return ret


def run_cvc4(filename: str) -> str:
    try:
        output = str(check_output(['cvc4', '--lang', 'smt', filename], stderr=STDOUT, timeout=120))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(f'cvc4 output:\n{output}')
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def run_z3(filename: str) -> str:
    try:
        output = str(check_output(['z3', 'smt.string_solver=z3str3', filename], stderr=STDOUT, timeout=120))
    except CalledProcessError as err:
        output = str(err.output)
    except TimeoutExpired:
        return 'timeout'
    # print(f'z3 output:\n{output}')
    if 'unsat' in output:
        return 'unsat'
    elif 'sat' in output:
        return 'sat'
    else:
        return 'unknown'


def print_tuple(e):
    return ',  '.join(e)


def write_result_double_check(benchmark_path: str, prob_size: int, strategy: str, qses_wrong: List[RET_FORMAT],
                              qses_timeout: List[RET_FORMAT], inconsistent: List[RET_FORMAT]):
    with open(f'{os.path.basename(benchmark_path)}.double_check', 'w') as fp:
        fp.write(f'path of problem set: {benchmark_path}\n')
        fp.write(f'number of processed problems:  {prob_size}\n')
        if strategy == '':
            fp.write(f'qses strategy set: default\n')
        else:
            fp.write(f'qses strategy set: {strategy}\n')
        fp.write(f'\n----- qses wrong: {len(qses_wrong)} cases. format: (filename, qses, cvc4, z3) -----\n')
        for e in qses_wrong:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- qses timeout: {len(qses_timeout)} cases. format: (filename, qses, cvc4, z3) -----\n')
        for e in qses_timeout:
            fp.write(f'{print_tuple(e)}\n')
        fp.write(f'\n----- inconsist results: {len(inconsistent)} cases. format: (filename, qses, cvc4, z3) -----\n')
        for e in inconsistent:
            fp.write(f'{print_tuple(e)}\n')


def write_result_strategy(benchmark_path: str, prob_size: int, result: List[Tuple[str, List[STRATEGY_COMP_FORMAT]]]):
    with open(f'{os.path.basename(benchmark_path)}.strategy_comp', 'w') as fp:
        fp.write(f'path of problem set: {benchmark_path}\n')
        fp.write(f'number of processed problems:  {prob_size}\n')
        for res in result:
            fp.write(f'\n{res[0]}: (strategy, # nodes, # transitions, sat/unsat?)\n')
            fp.write('    ' + '\n    '.join([', '.join([s.rjust(15) for s in e]) for e in res[1]]) + '\n')


def double_check(benchmark_path: str, names: List[str], strategy: str):
    qses_wrong: List[RET_FORMAT] = list()
    qses_timeout: List[RET_FORMAT] = list()
    inconsistent: List[RET_FORMAT] = list()
    counter = 0
    for name in names:
        filename = f'{benchmark_path}/{name}'
        ret_cvc4 = run_cvc4(filename)
        ret_z3 = run_z3(filename)
        ret_qses = run_qses(filename, strategy)
        print(f'{name} checked by qses, cvc4 and z3: {ret_qses}, {ret_cvc4}, {ret_z3}')

        ret = (name, ret_qses, ret_cvc4, ret_z3)
        if ret_qses != ret_cvc4 or ret_qses != ret_z3 or ret_cvc4 != ret_z3:
            inconsistent.append(ret)
        if ret_qses == 'timeout':
            qses_timeout.append(ret)
        if (ret_qses == 'sat' and ret_cvc4 == 'unsat') or (ret_qses == 'unsat' and ret_cvc4 == 'sat') or \
                (ret_qses == 'sat' and ret_z3 == 'unsat') or (ret_qses == 'unsat' and ret_z3 == 'sat'):
            qses_wrong.append(ret)

        # write when 1000 problems processed to have some results if the script terminates accidentally
        # each write will overwrite the previous written contents
        counter += 1
        if counter % 1000 == 0:
            write_result_double_check(benchmark_path, counter, strategy, qses_wrong, qses_timeout, inconsistent)

    # write the final results
    write_result_double_check(benchmark_path, counter, strategy, qses_wrong, qses_timeout, inconsistent)


def is_zero_unsat(data: List[STRATEGY_COMP_FORMAT]):
    return sum([1 for e in data if e[1] != '0' or e[2] != '0' and e[3] != 'unsat']) == 0


def strategy_comparison(benchmark_path: str, names: List[str]):
    print('comparing qses transform strategies: (' + ', '.join(strategy_options) + ')')
    results: List[Tuple[str, List[STRATEGY_COMP_FORMAT]]] = list()
    counter = 0
    for name in names:
        filename = f'{benchmark_path}/{name}'
        ret_qses = run_qses_strategy_comp(filename)
        print(f'\n{name} checked by qses, comparing transform strategies:')
        print('    ' + ', '.join([e.rjust(15) for e in ['strategy', '# nodes', '# transitions', 'sat/unsat?']]))
        print('    ' + '\n    '.join([', '.join([s.rjust(15) for s in e]) for e in ret_qses]))
        if not is_zero_unsat(ret_qses):  # filter out cases of zero node/transition and unsat
            results.append((name, ret_qses))

        # write when 1000 problems processed to have some results if the script terminates accidentally
        # each write will overwrite the previous written contents
        counter += 1
        if counter % 1000 == 0:
            write_result_strategy(benchmark_path, counter, results)

    # write the final results
    write_result_strategy(benchmark_path, counter, results)


def main(argv):
    # Set argument parser
    arg_parser = ArgumentParser(prog=None,
                                usage=None,
                                description="A python script to solve word equation only by transformation "
                                            "(ignore length constraints):",
                                epilog=None)
    arg_parser.add_argument("benchmark_path", help="path of benchmarks")
    arg_parser.add_argument("-c", "--compare",
                            help="Report comparison of qses transform strategies, default is off. "
                                 "If set on, double check is disabled.",
                            dest="compare", default="off")
    arg_parser.add_argument("-s", "--strategy",
                            help="Specify strategy for double check, default is \'\'. ",
                            dest="strategy", default="")
    args = arg_parser.parse_args()

    benchmark_path = os.path.normpath(args.benchmark_path)
    qses_strategy_flag = args.compare != 'off'
    names = sorted([f for f in os.listdir(benchmark_path) if '.smt2' in f])
    prob_size = len(names)
    print(f'benchmark path: {benchmark_path}')
    print(f'number of problems: {prob_size}')

    if qses_strategy_flag:
        print('task: qses strategy comparison')
        strategy_comparison(benchmark_path, names)
    else:
        if args.strategy == '':
            print(f'task: double check with default qses strategy')
        else:
            print(f'task: double check with qses strategy {args.strategy}')
        double_check(benchmark_path, names, args.strategy)


if __name__ == '__main__':
    main(sys.argv)
